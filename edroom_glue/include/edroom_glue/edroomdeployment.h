//##############################################################################
//###############     This file has been generated by EDROOM     ###############
//##############################################################################
 
#ifndef EDROOMDEPLOYMENT_H_
#define EDROOMDEPLOYMENT_H_
 
#include <edroom_glue/edroom_can_drv.h>
#include <edroom_glue/edroomdf.h>
#include <public/edroomsl_iface_v1.h>
#include <public/ricuasw_iface_v1.h>
#include <public/rccepdmanager_iface_v1.h>
#include <public/rcctm_channelctrl_iface_v1.h>
#include <public/cchk_fdirmng_iface_v1.h>
#include <public/ccbkgtcexec_iface_v1.h>
#include "public/pi_free_can_drv.h"
// ***********************************************************************
// class CEDROOMSystemMemory
// ***********************************************************************
 
class CEDROOMSystemMemory{
 
	//!Messages Memory of component ricuasw
	CEDROOMMessage	ricuaswMessages[10];
	bool	ricuaswMessagesMarks[10];
	CEDROOMQueue::CQueueNode	ricuaswQueueNodes[13];
	bool	ricuaswQueueNodesMarks[13];
 
	//!Messages Memory of component rccepdmanager
	CEDROOMMessage	rccepdmanagerMessages[10];
	bool	rccepdmanagerMessagesMarks[10];
	CEDROOMQueue::CQueueNode	rccepdmanagerQueueNodes[11];
	bool	rccepdmanagerQueueNodesMarks[11];
 
	//!Messages Memory of component rcctm_channelctrl
	CEDROOMMessage	rcctm_channelctrlMessages[10];
	bool	rcctm_channelctrlMessagesMarks[10];
	CEDROOMQueue::CQueueNode	rcctm_channelctrlQueueNodes[10];
	bool	rcctm_channelctrlQueueNodesMarks[10];
 
	//!Messages Memory of component cchk_fdirmng
	CEDROOMMessage	cchk_fdirmngMessages[10];
	bool	cchk_fdirmngMessagesMarks[10];
	CEDROOMQueue::CQueueNode	cchk_fdirmngQueueNodes[14];
	bool	cchk_fdirmngQueueNodesMarks[14];
 
	//!Messages Memory of component ccbkgtcexec
	CEDROOMMessage	ccbkgtcexecMessages[10];
	bool	ccbkgtcexecMessagesMarks[10];
	CEDROOMQueue::CQueueNode	ccbkgtcexecQueueNodes[11];
	bool	ccbkgtcexecQueueNodesMarks[11];
 
	public:
 
	RICUASW::CEDROOMMemory ricuaswMemory;
	RCCEPDManager::CEDROOMMemory rccepdmanagerMemory;
	RCCTM_ChannelCtrl::CEDROOMMemory rcctm_channelctrlMemory;
	CCHK_FDIRMng::CEDROOMMemory cchk_fdirmngMemory;
	CCBKGTCExec::CEDROOMMemory ccbkgtcexecMemory;
 
//!Set Memory
	void SetMemory();
};


//	***************************************************************
//	class CEDROOMRemoteConnection
//	***************************************************************

class CEDROOMRemoteConnection{

	friend class CEDROOMRemoteCommSAP;

	//! connection channel 1
	CEDROOMRemoteTXChannel m_Channel1;
	//! connection channel 2
	CEDROOMLocalTXChannel m_Channel2;


};


//	***************************************************************
/*!
 * \class CEDROOMRemoteCommSAP
 * \brief This class implements the EDROOM local communication service access
 * point
 *
 * \author Óscar Rodríguez Polo
 */
//	***************************************************************

class CEDROOMRemoteCommSAP
{

public:


	/*!
	 * \brief register the Interface
	 * \param id interface local identifier
	 * \param interface reference to the interface
	 * \param pComponent pointer to the component
	 * \return a value !=0 if there is an error
	 */
	TEDROOMInt32 RegisterInterface(TEDROOMInterfaceID id,
			CEDROOMInterface & interface,
			CEDROOMComponent* pComponent);


	/*!
	 * \brief Connect the components interfaces
	 * \param interfacericuasw reference to component 1 interface
	 * \param interfacerccepdmanager reference to the objet that handles the connection
	 * \param connection reference to the object that handles the connection
	 * \param ricuaswTorccepdmanagerSignalTranslator component1 to component2 signal
	 * 				translator
	 * \param rccepdmanagerToricuaswSignalTranslator component2 to component1 signal
	 * 				translator
	 */
	void Connect(CEDROOMInterface & interfacericuasw
				,CEDROOMInterface & interfacerccepdmanager
				,CEDROOMRemoteConnection &connection
				,TEDROOMSignal (ricuaswTorccepdmanagerSignalTranslator) (TEDROOMSignal)
				,TEDROOMSignal (rccepdmanagerToricuaswSignalTranslator) (TEDROOMSignal));


};

class CEDROOMSystemCommSAP{
 
	 friend class CEDROOMSystemDeployment;
//!Communication Service Access Point
 
	CEDROOMLocalCommSAP m_localCommSAP;
	CEDROOMRemoteCommSAP m_remoteCommSAP;
 
//!Conections
 
	CEDROOMRemoteConnection remote_connections[4];
	//CEDROOMLocalConnection connections[5]; No local connections

	//!Components

	static RICUASW   * mp_ricuasw;
	static RCCEPDManager   * mp_rccepdmanager;
	static RCCTM_ChannelCtrl   * mp_rcctm_channelctrl;
	static CCHK_FDIRMng   * mp_cchk_fdirmng;
	static CCBKGTCExec   * mp_ccbkgtcexec;
 
 
//!Set Components
 
	void SetComponents(RICUASW   *p_ricuasw,
							RCCEPDManager   *p_rccepdmanager,
							RCCTM_ChannelCtrl   *p_rcctm_channelctrl,
							CCHK_FDIRMng   *p_cchk_fdirmng,
							CCBKGTCExec   *p_ccbkgtcexec);
 
 
//Signal Conversion
 
	static TEDROOMSignal C5BKGTCExec_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl3(TEDROOMSignal signal);
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl3__C5BKGTCExec_PTMChannelCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PBKGExecCtrl__C5BKGTCExec_PBKGExecCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C5BKGTCExec_PBKGExecCtrl__C2EPDManager_PBKGExecCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PHK_FDIRCtrl__C4HK_FDIRMng_PHK_FDIRCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C4HK_FDIRMng_PHK_FDIRCtrl__C2EPDManager_PHK_FDIRCtrl(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl2__C4HK_FDIRMng_PTMChannelCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C4HK_FDIRMng_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl2(TEDROOMSignal signal);
 
//Signal Conversion
 
	static TEDROOMSignal C2EPDManager_PTMChannelCtrl__C3TM_ChannelCtrl_PTMChannelCtrl(TEDROOMSignal signal);
	static TEDROOMSignal C3TM_ChannelCtrl_PTMChannelCtrl__C2EPDManager_PTMChannelCtrl(TEDROOMSignal signal);
 
 
//!Register Interfaces
	void RegisterInterfaces();
 
//!Set Local Connections
	void SetLocalConnections();
 
//!Set Remote Connections
	void SetRemoteConnections();
 
//!Set Connections
	void SetConnections();

	// ********************************
	// Handling CAN IRQ vector 0x1C

	//! Event for trigger the bottom half associated to the IRQ
	static Pr_IRQEvent RemoteCommEventIRQ;
	//! Binary Semaphore for signal the end of the bottom half of the IRQ
	static Pr_SemaphoreBin RemoteCommSemEndIRQ;
	//! IRQ Handler for the IRQ
	static Pr_IRQHandler_RetType RemoteCommIRQHandler(void);

	//! Bottom Half Task Function for the IRQ
	static Pr_TaskRV_t RemoteCommIRQBottomHalfTask(Pr_TaskP_t);
	
	
	
	
};
 
class CEDROOMSystemDeployment{
 
//!Kernel
	Pr_Kernel	kernel;
 
#ifdef CONFIG_EDROOMDEPLOYMENT_NEED_TASK
 
//!Main Task
static Pr_TaskRV_t main_task(Pr_TaskP_t);
 
#endif
	CEDROOMSystemMemory   systemMemory;
	CEDROOMSystemCommSAP  systemCommSAP;
 
	RICUASW   * mp_ricuasw;
	RCCEPDManager   * mp_rccepdmanager;
	RCCTM_ChannelCtrl   * mp_rcctm_channelctrl;
	CCHK_FDIRMng   * mp_cchk_fdirmng;
	CCBKGTCExec   * mp_ccbkgtcexec;
 
	public:
 
	CEDROOMSystemDeployment();
 
//!Deployment Configuration
	void Config(RICUASW   *p_ricuasw,
					RCCEPDManager   *p_rccepdmanager,
					RCCTM_ChannelCtrl   *p_rcctm_channelctrl,
					CCHK_FDIRMng   *p_cchk_fdirmng,
					CCBKGTCExec   *p_ccbkgtcexec);
 
//!Deployment Start
	void Start();
 
//!StartComponents
	void StartComponents();
//!Config Components
 
	RICUASW::CEDROOMMemory 		* GetricuaswMemory(){return &systemMemory.ricuaswMemory;}
	RCCEPDManager::CEDROOMMemory 		* GetrccepdmanagerMemory(){return &systemMemory.rccepdmanagerMemory;}
	RCCTM_ChannelCtrl::CEDROOMMemory 		* Getrcctm_channelctrlMemory(){return &systemMemory.rcctm_channelctrlMemory;}
	CCHK_FDIRMng::CEDROOMMemory 		* Getcchk_fdirmngMemory(){return &systemMemory.cchk_fdirmngMemory;}
	CCBKGTCExec::CEDROOMMemory 		* GetccbkgtcexecMemory(){return &systemMemory.ccbkgtcexecMemory;}
 
 

 
 
};
#endif
